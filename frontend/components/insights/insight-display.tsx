'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Sparkles, TrendingUp, Lightbulb, Target, BarChart3, Download, Copy, Check } from 'lucide-react'
import { useState } from 'react'

interface Insights {
  overview: string
  keyFindings: string[]
  sentimentAnalysis: string
  trends: string[]
  recommendations: string[]
  pollBreakdowns: {
    pollTitle: string
    winningOption: string
    insights: string
  }[]
}

interface InsightDisplayProps {
  insights: Insights
  projectName?: string
  onExport?: () => void
  canExport?: boolean
}

export function InsightDisplay({
  insights,
  projectName,
  onExport,
  canExport = false
}: InsightDisplayProps) {
  const [copied, setCopied] = useState(false)

  const handleCopyToClipboard = () => {
    const text = `
AI Insights for ${projectName || 'Project'}
Generated by True Pulse

OVERVIEW
${insights.overview}

KEY FINDINGS
${insights.keyFindings.map((finding, i) => `${i + 1}. ${finding}`).join('\n')}

SENTIMENT ANALYSIS
${insights.sentimentAnalysis}

TRENDS
${insights.trends.map((trend, i) => `${i + 1}. ${trend}`).join('\n')}

RECOMMENDATIONS
${insights.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

POLL BREAKDOWNS
${insights.pollBreakdowns.map(pb => `
Poll: ${pb.pollTitle}
Winning Option: ${pb.winningOption}
Insights: ${pb.insights}
`).join('\n')}
    `.trim()

    navigator.clipboard.writeText(text).then(() => {
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    })
  }

  return (
    <div className="space-y-6">
      {/* Header Section */}
      <Card className="border-blue-200 dark:border-blue-800 bg-gradient-to-br from-blue-50 to-white dark:from-blue-900/20 dark:to-gray-900">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center">
                <Sparkles className="w-6 h-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-2xl">AI Insights</CardTitle>
                {projectName && (
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                    Analysis for {projectName}
                  </p>
                )}
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleCopyToClipboard}
                className="gap-2"
              >
                {copied ? (
                  <>
                    <Check className="w-4 h-4" />
                    Copied
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    Copy
                  </>
                )}
              </Button>
              {canExport && onExport && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={onExport}
                  className="gap-2"
                >
                  <Download className="w-4 h-4" />
                  Export
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-blue-100 dark:border-blue-800">
            <h3 className="font-semibold text-gray-900 dark:text-gray-100 mb-2 flex items-center gap-2">
              <BarChart3 className="w-5 h-5 text-blue-500" />
              Overview
            </h3>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              {insights.overview}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Key Findings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5 text-green-500" />
            Key Findings
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {insights.keyFindings.map((finding, index) => (
              <div
                key={index}
                className="flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700"
              >
                <Badge className="mt-0.5 bg-green-500">{index + 1}</Badge>
                <p className="flex-1 text-gray-700 dark:text-gray-300">{finding}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Two Column Layout for Trends and Sentiment */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Trends */}
        {insights.trends.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-purple-500" />
                Trends Identified
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {insights.trends.map((trend, index) => (
                  <li
                    key={index}
                    className="flex items-start gap-2 text-gray-700 dark:text-gray-300"
                  >
                    <span className="text-purple-500 font-bold mt-0.5">•</span>
                    <span className="flex-1">{trend}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}

        {/* Sentiment Analysis */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-orange-500" />
              Sentiment Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
              {insights.sentimentAnalysis}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Recommendations */}
      <Card className="border-blue-200 dark:border-blue-800">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lightbulb className="w-5 h-5 text-yellow-500" />
            Recommendations
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {insights.recommendations.map((recommendation, index) => (
              <div
                key={index}
                className="flex items-start gap-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800"
              >
                <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-xs font-bold">{index + 1}</span>
                </div>
                <p className="flex-1 text-gray-700 dark:text-gray-300">{recommendation}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Poll Breakdowns */}
      {insights.pollBreakdowns.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Individual Poll Analysis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {insights.pollBreakdowns.map((breakdown, index) => (
                <div
                  key={index}
                  className="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700"
                >
                  <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-2">
                    {breakdown.pollTitle}
                  </h4>
                  <div className="flex items-center gap-2 mb-2">
                    <Badge variant="secondary" className="text-xs">
                      Winner: {breakdown.winningOption}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                    {breakdown.insights}
                  </p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Footer Note */}
      <div className="text-center text-xs text-gray-500 dark:text-gray-400 py-4">
        <p>
          Generated by True Pulse AI • Analysis based on current voting data •{' '}
          {new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}
        </p>
      </div>
    </div>
  )
}
